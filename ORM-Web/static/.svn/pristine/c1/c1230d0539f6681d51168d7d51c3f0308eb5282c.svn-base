<mat-toolbar style="width: auto; margin:-24px -24px 0px -24px; height: 8.5vh; font-size: 2vh;">
    <h2 mat-dialog-title [matTooltip]="ParentData.row.FrameworkName !== null? ParentData.row.FrameworkName : ''">
        {{ParentData.row.FrameworkName !== null? ParentData.row.FrameworkName.substring(0, 40): ''}}{{(ParentData.row.FrameworkName !== null?ParentData.row.FrameworkName.length>40?"...":"" : '')}} |
        Ver-{{ParentData.row.Version}}
        <span style="font-size: 1.6vh;">[ Uploaded on <span
                style="color: black;">{{utils.formatDate(ParentData.row.UploadDate)}}</span> ]</span>
    </h2>
    <span class="spacer"></span>
    <div mat-dialog-actions class="button-container">
        <button mat-raised-button title="previous" [disabled]="ParentData.row.id === 1"
            (click)="getPrevPolicyDetails(ParentData.row.id)">
            <mat-icon aria-hidden="false" aria-label="Left" fontIcon="chevron_left"></mat-icon> Previous
        </button>
        <button mat-raised-button title="next" (click)="getNextPolicyDetails(ParentData.row.id)"
            [matTooltip]="nextPolicyDetails?.FrameworkName"
            [disabled]="ParentData.row.id == (ParentData.policyList.length)">
            {{nextPolicyDetails.FrameworkName? nextPolicyDetails.FrameworkName.substring(0, 40):''}}
            {{(nextPolicyDetails.FrameworkName? nextPolicyDetails.FrameworkName.length>40?"...":"" : '')}}
            <span *ngIf="nextPolicyDetails?.FrameworkName">-</span>
            {{nextPolicyDetails.UploadDate | date: 'MMMYY'}} &nbsp;&nbsp;Next<mat-icon aria-hidden="false" aria-label="Right" fontIcon="chevron_right">
            </mat-icon>
        </button>
        <button mat-icon-button *ngIf="isMax" title="Restore" (click)="minimize()">
            <mat-icon aria-hidden="false" aria-label="Restore" fontIcon="fullscreen_exit"></mat-icon>
        </button>
        <button mat-icon-button *ngIf="!isMax" title="Maximize" (click)="maximize()">
            <mat-icon aria-hidden="false" aria-label="Maximize" fontIcon="fullscreen"></mat-icon>
        </button>
        <button mat-icon-button title="close" cdkFocusInitial mat-dialog-close>
            <mat-icon aria-hidden="false" aria-label="Close" fontIcon="close"></mat-icon>
        </button>
    </div>
</mat-toolbar>

<mat-dialog-content>
    <div class="mat-elevation-z8" *ngIf="dataSource.filteredData.length; else noDataTemplate">
        <table mat-table [dataSource]="dataSource" matSort>
            <ng-container matColumnDef="id">
                <th mat-header-cell *matHeaderCellDef [attr.rowspan]="2"> # </th>
                <td mat-cell *matCellDef="let row; let i = index" [attr.rowspan]="getRowSpan('risk', i)"
                    [style.display]="getRowSpan('risk', i) ? '' : 'none'"> {{row.id}} </td>
            </ng-container>

            <ng-container matColumnDef="risk">
                <th mat-header-cell *matHeaderCellDef [attr.rowspan]="2"> Risk </th>
                <td mat-cell *matCellDef="let row; let i = index" [attr.rowspan]="getRowSpan('risk', i)"
                    [style.display]="getRowSpan('risk', i) ? '' : 'none'">{{row.col1}}</td>
            </ng-container>

            <ng-container matColumnDef="riskMetric">
                <th mat-header-cell *matHeaderCellDef [attr.rowspan]="2"> Risk Metric </th>
                <td mat-cell class="content-width" *matCellDef="let row">{{row.col2}}</td>
            </ng-container>

            <ng-container matColumnDef="units">
                <th mat-header-cell *matHeaderCellDef [attr.rowspan]="2"> Units <br> (Metric Source) </th>
                <td mat-cell *matCellDef="let row">{{row.UnitName}}</td>
            </ng-container>

            <ng-container matColumnDef="measurements">
                <th mat-header-cell *matHeaderCellDef [attr.rowspan]="2"> Measurements </th>
                <td mat-cell class="text-align" *matCellDef="let row">
                    Decimal &nbsp;<mat-slide-toggle [disabled]="true" [checked]="row.MeasurmentTypeID==2">
                    </mat-slide-toggle> &nbsp;Percentage
                </td>
            </ng-container>

            <ng-container matColumnDef="riskLimits">
                <th mat-header-cell *matHeaderCellDef [attr.colspan]="3" class="align-center"> Risk Limits </th>
            </ng-container>

            <ng-container matColumnDef="low">
                <th mat-header-cell *matHeaderCellDef class="text-align"> <span class="dot"
                        [ngStyle]="{'background-color':getColor('low')}"></span> Low Risk</th>
                <td mat-cell *matCellDef="let row" class="text-align">{{row.Low}}</td>
            </ng-container>

            <ng-container matColumnDef="moderate">
                <th mat-header-cell *matHeaderCellDef class="text-align"> <span class="dot"
                        [ngStyle]="{'background-color':getColor('moderate')}"></span> Moderate Risk</th>
                <td mat-cell *matCellDef="let row" class="text-align">{{row.Moderate}}</td>
            </ng-container>

            <ng-container matColumnDef="high">
                <th mat-header-cell *matHeaderCellDef class="text-align"> <span class="dot"
                        [ngStyle]="{'background-color':getColor('high')}"></span> Critical Risk</th>
                <td mat-cell *matCellDef="let row" class="text-align">{{row.High}}</td>
            </ng-container>

            <tr mat-header-row *matHeaderRowDef="['id', 'risk', 'riskMetric', 'units', 'measurements', 'riskLimits']">
            </tr>
            <tr mat-header-row *matHeaderRowDef="['low', 'moderate', 'high']"></tr>
            <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
        </table>
    </div>
    <ng-template #noDataTemplate>
        <p class="no-data">No Data Found</p>
    </ng-template>
</mat-dialog-content>
