<mat-toolbar class="fontSize">
    <span>Key Risk Indicator | Historical Reported KRI(s)</span>
    <span class="spacer"></span>
</mat-toolbar>

<div class="container">
    <div class="actions-container">
        <div class="left-action">
            <div class="form-group">
                <label class="dropdown-label">Group</label>
                <mat-form-field appearance="standard">
                    <mat-select [(ngModel)]="kriService.kriHistoricalReportedSelectedGroup"
                        (selectionChange)="onGroupChange()">
                        <mat-option value="">All</mat-option>
                        <mat-option *ngFor="let group of getGroupList()" [value]="group.GroupID">{{group.GroupName}}
                        </mat-option>
                    </mat-select>
                </mat-form-field>
            </div>

            <div class="form-group">
                <label class="dropdown-label">Unit</label>
                <mat-form-field appearance="standard">
                    <mat-select [disabled]="!kriService.kriHistoricalReportedSelectedGroup"
                        [(ngModel)]="kriService.kriHistoricalReportedSelectedUnit" (selectionChange)="onUnitChange()">
                        <mat-option value="">All</mat-option>
                        <mat-option *ngFor="let unit of getUnitList()" [value]="unit.UnitID">{{unit.UnitName}}
                        </mat-option>
                    </mat-select>
                </mat-form-field>
            </div>

            <div class="form-group">
                <label class="dropdown-label">Year</label>
                <mat-form-field appearance="standard">
                    <mat-select [(ngModel)]="kriService.kriHistoricalReportedSelectedYear"
                        (selectionChange)="onYearChange($event.value)">
                        <mat-option *ngFor="let year of getYearList()" [value]="year.Years">{{year.Years}}</mat-option>
                    </mat-select>
                </mat-form-field>
            </div>
        </div>

        <div class="right-action">
            <div class="reporting-form-group">
                <label>Reporting Frequency:
                    {{kriService.kriHistoricalReportedData?.reportingFrequency[0]?.Name}}</label>
            </div>
            <div class="form-group">
                <mat-form-field appearance="standard">
                    <mat-label>Search</mat-label>
                    <input matInput (keyup)="applyFilter($event)" #input>
                </mat-form-field>
                <button
                    *ngIf="getAllUnitRowsFilteredLength()"
                    mat-icon-button matTooltipPosition="right" matTooltip="Export to Excel" (click)="exportAsExcelKRiHistoricalReporting(kriService.kriHistoricalReportedAllDataNo.length)">
                    <img src="assets/icon-excel.svg">
                </button>
            </div>
        </div>
    </div>

    <div class="container-body" *ngIf="kriService.kriHistoricalReportedAllMetricsNo; else noDataTemplate">
        <ng-container
            *ngFor="let data of kriService.kriHistoricalReportedSelectedUnitNameRows; let i = index;">
            <div id="{{'historicalReporting'+i}}" *ngIf="data.Metrics.filteredData.length > 0">
                <mat-expansion-panel  class="expansion-panel" [expanded]="data.IsExpanded" (opened)="data.IsExpanded = true" (closed)="data.IsExpanded = false">
                    <mat-expansion-panel-header class="expansion-header">
                        <mat-panel-title class="expansion-panel-title">
                            <label class="expansion-group-title"><span class="title-label">{{data.GroupName}} |
                                    {{data.UnitName}}</span></label>
                            <label><span class="title-label">{{data.Metrics.filteredData.length}}</span>&nbsp;KRI(s)
                                <button *ngIf="data.Metrics.filteredData.length" mat-icon-button
                                    matTooltipPosition="right" matTooltip="Export to Excel" (click)="exportAsExcel(i,data.GroupName,data.UnitName,data)">
                                    <img src="assets/icon-excel.svg">
                                </button>
                            </label>
                        </mat-panel-title>
                    </mat-expansion-panel-header>
                    <div class="expansion-body">
                        <table class="mat-elevation-z8" *ngIf="data.Metrics.data.length" mat-table
                            [dataSource]="data.Metrics">

                            <ng-container *ngFor="let item of displayedColumns" [matColumnDef]="item">
                                <th mat-header-cell *matHeaderCellDef></th>
                                <td mat-cell *matCellDef="let element">
                                    {{element[item]}}</td>
                            </ng-container>

                            <ng-container *ngFor="let item of getPeriodColumns(data.Metrics.filteredData)"
                                [matColumnDef]="item">
                                <!-- <th mat-header-cell *matHeaderCellDef>{{item.includes('ThresholdValue')? 'KRI Value':
                                    item.includes('Remark')? 'Remarks': item.includes('Date')? 'Date' : 'Measurement'}}
                                </th> -->
                                <th mat-header-cell *matHeaderCellDef>
                                    {{ item.includes('ThresholdValue') ? 'KRI Value' :
                                       item.includes('Remark') ? 'Remarks' :
                                       item.includes('Date') ? 'Date' :
                                       item.includes('KRI_Status') ? 'KRI Status' : 'Measurement'}}
                                  </th>

                                <td mat-cell *matCellDef="let element">
                                    <span
                                        [ngClass]="{
                                            'threshold-value': item.includes('ThresholdValue'),
                                            'measurement-value': item.includes('Measurement'),
                                            'kri-status-bold': item.includes('KRI_Status')
                                        }"
                                        [ngStyle]="{
                                            'background-color': item.includes('ThresholdValue') ? getPeriodColumnColorCode(element.previousData, item) : '',
                                            'font-weight': item.includes('KRI_Status') ? 'bold' : ''
                                        }">

                                        {{item.includes('Date')? (getPeriodColumnValue(element.previousData, item) |
                                        date  : 'dd MMM yyyy') :
                                        getPeriodColumnValue(element.previousData, item)}}

                                        {{ item.includes('Measurement') && !['', undefined, null].includes(getPeriodColumnValue(element.previousData, item)) && getPeriodColumnValue(element.previousData, item) !== 'NA' ? '%' : '' }}




                                    </span>
                                </td>
                            </ng-container>

                            <ng-container *ngFor="let header of displayedHeaders; let i = index"
                                [matColumnDef]="header">
                                <ng-container *ngIf="(i < 7)">
                                    <th [ngClass]="{'measurement-header': (i == 2)}" mat-header-cell *matHeaderCellDef
                                        [attr.rowspan]="2">
                                        {{i == 0? 'KRI Code': i == 1? 'Indicator': i == 2? 'Measurement Frequency': i ==
                                        3?
                                        'Defined Quater': i==4? 'Target ': i==5? 'KRI Type': 'KRI Status'}}</th>
                                </ng-container>
                            </ng-container>
                            <ng-container *ngFor="let header of getPeriodHeaders(data.Metrics.filteredData)"
                                [matColumnDef]="header">
                                <th class="text-center" mat-header-cell *matHeaderCellDef [attr.colspan]="5">
                                    {{getPeriodHeaderValue(data.Metrics.filteredData, header)}}
                                    <span class="status-value">({{getPeriodheaderStatus(data.Metrics.filteredData,
                                        header)}})</span>
                                </th>
                            </ng-container>

                            <tr mat-header-row
                                *matHeaderRowDef="displayedHeaders.concat(getPeriodHeaders(data.Metrics.filteredData))">
                            </tr>
                            <ng-container>

                            </ng-container>
                            <tr mat-header-row *matHeaderRowDef="getPeriodColumns(data.Metrics.filteredData)"></tr>
                            <tr mat-row
                                *matRowDef="let row; columns: displayedColumns.concat(getPeriodColumns(data.Metrics.filteredData))">
                            </tr>
                        </table>
                    </div>
                </mat-expansion-panel>
            </div>
        </ng-container>
    </div>
    <ng-template #noDataTemplate>
        <p class="no-data">No Data Found</p>
    </ng-template>
</div>
